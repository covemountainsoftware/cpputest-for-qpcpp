//$file${sm::alarm.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: zephyr_posix_demo.qm
// File:  ${sm::alarm.cpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${sm::alarm.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * Copyright (c) 2023 Victor Chavez
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#include "alarm.hpp"
#include "signals.hpp"

namespace sm {

#include <zephyr/kernel.h>
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//$define${demo::Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${demo::Alarm} .............................................................

//${demo::Alarm::Alarm} ......................................................
Alarm::Alarm()
: QActive(Q_STATE_CAST(&initial))
{}

//${demo::Alarm::SM} .........................................................
Q_STATE_DEF(Alarm, initial) {
    //${demo::Alarm::SM::initial}
    subscribe(Timeout_SIG);
    subscribe(Reset_SIG);
    return tran(&wait_timeout);
}

//${demo::Alarm::SM::wait_timeout} ...........................................
Q_STATE_DEF(Alarm, wait_timeout) {
    QP::QState status_;
    switch (e->sig) {
        //${demo::Alarm::SM::wait_timeout}
        case Q_ENTRY_SIG: {
            m_driver.set_alarm(ALARM_TIME);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${demo::Alarm::SM::wait_timeout::Timeout}
        case Timeout_SIG: {
            status_ = tran(&wait_reset);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${demo::Alarm::SM::wait_reset} .............................................
Q_STATE_DEF(Alarm, wait_reset) {
    QP::QState status_;
    switch (e->sig) {
        //${demo::Alarm::SM::wait_reset::Reset}
        case Reset_SIG: {
            m_driver.reset();
            status_ = tran(&wait_timeout);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//$enddef${demo::Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

} // namespace posix_demo
