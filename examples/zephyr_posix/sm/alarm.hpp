//$file${sm::alarm.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: zephyr_posix_demo.qm
// File:  ${sm::alarm.hpp}
//
// This code has been generated by QM 5.2.3 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open source software: you can redistribute it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation.
//
// This code is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
// more details.
//
// NOTE:
// Alternatively, this generated code may be distributed under the terms
// of Quantum Leaps commercial licenses, which expressly supersede the GNU
// General Public License and are specifically designed for licensees
// interested in retaining the proprietary status of their code.
//
// Contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${sm::alarm.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/*
 * Copyright (c) 2023 Victor Chavez
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */
#pragma once
#include <mock/alarm_driver.hpp>
#include <qpcpp.hpp>

namespace sm {
static uint32_t constexpr ALARM_TIME{120U};
//$declare${demo::Alarm} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv

//${demo::Alarm} .............................................................
class Alarm : public QP::QActive {
private:
    AlarmDriver m_driver;

public:
    Alarm();

protected:
    Q_STATE_DECL(initial);
    /* Wait for a timeout of the alarm */
    Q_STATE_DECL(wait_timeout);
    /* Wait for a reset of the alarm */
    Q_STATE_DECL(wait_reset);
}; // class Alarm
//$enddecl${demo::Alarm} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

} // namespace posix_demo${sm::alarm.hpp}
